extends Sprite

var particulas = preload("res://Scenes/Malware_Destruido_particulas.tscn")

var D_power = preload("res://Scenes/D_power.tscn")
var T_power = preload("res://Scenes/T_power.tscn")
var Vida = preload("res://Scenes/Vida_power.tscn")
var Overclock = preload("res://Scenes/Overclock.tscn")

signal Criar_Particulas_Malware_Destruido(particula, location)
signal node_instance(node, pos)

func _ready():
	if Global.World != null:
		connect("node_instance", Global.World, "node_instance")

func _process(delta):
	global_position.x -= Global.WorldSpeed * delta
	
	if global_position.x < -20:
		queue_free()


func _on_Hitbox_area_entered(area):
	if area.is_in_group("Dano_Player"):
		emit_signal("node_instance", particulas, global_position)
		area.get_parent().queue_free()
		queue_free()
		Global.Pontos += 5
		
		randomize()
		
		# chance de 1 em 10 de dropar alguma coisa
		if rand_range(0, 100) <= 30:
			var buff = rand_range(0, 100)
			if buff <= 20:
				if Global.ArmasAmmo[0] <= 15: emit_signal("node_instance", T_power, global_position)
			elif buff > 20 and buff <= 40:
					if Global.ArmasAmmo[1] <= 15: emit_signal("node_instance", D_power, global_position)
			elif buff > 40 and buff <= 60:
					emit_signal("node_instance",Vida, global_position)
			elif buff > 60 and buff <= 80:
					if Global.OverclockNumber < 3: emit_signal("node_instance",Overclock, global_position)
			
			
			# chance de 1/10 de dropar overclock se dropar algo
			#match buff: #cria overclock
				#2: if Global.ArmasAmmo[0] <= 15: emit_signal("node_instance", T_power, global_position)
				#4: if Global.ArmasAmmo[1] <= 15: emit_signal("node_instance", D_power, global_position)
				#manda sinal pra criar um buff baseado em buff%2, ai tem 1/2 de vir cada arma, se a 
				#arma dropada já tiver sido dropada, ignora o drop, se já tiverem ido todas, dropa nada
			
	
